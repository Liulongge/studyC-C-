// 必须让自己习惯于c++的做事方式
// 条款1：视c++为一个语言联邦(View C++ as a federation od language)
// 今天的c++是一门多范式语言，同时支持过程式、面向对象、函数式、泛型和元编程特性。这种能力和灵活性使C++成为无可比拟的工具，但是也会引起一些混乱
//      所有的”正确使用“规则似乎都是例外

// C++的主要自语言包含：
//  1、c语言的联邦成员
//  2、面向对象的联邦成员
//  3、模版的联邦成员
//  4、STL的联邦成员

// 1、C++的语言部分：
//          C++仍然是基于C的。块、语句、预处理器、内置数据类型、数组、指针等都来自于C。在许多情况下，
//      C++提供的解决问题的方法优于C中的对应方法(C语言没有模板、异常、重载等)。
// 2、C++的面向对象部分：
//          C++的这一部分就是C with Class的全部内容，类(包含构造函数和析构函数)、封装、继承、多态、虚函数(动态板顶等)、
//      这是C++中面向对象设计的经典规则最直接适用的部分。
// 3、C++的模板部分：
//          这是C++的泛型编程部分。事实上，模版是如此强大，他们产生了一种全新的编程范式，模板元编程(template metadata programming, TMP)。
// 4、C++的STL部分：
//          STL是一个模板库，但是他是一个非常特殊的模板库。他通过一些约定，很好地将容器、迭代器、算法和函数对象融合在一起。
// 5、
// 