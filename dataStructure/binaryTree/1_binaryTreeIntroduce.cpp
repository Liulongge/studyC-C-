// 在符号表中，查询效率比较高（地址是连续的），符号表的增删操作，随着元素个数的N的增多，其耗时也是线性增多，时间复杂度都是O(n)，为了提高效率，将介绍数据结构--树
// 树的基本定义
// 树是计算机中非常重要的一种数据结构，同时使用树这种数据结构，可以描述现实生活中很多事物，例如：家谱，单位的组织架构等
// 树是由n(n > 1)个有限结点组成一个具有层次关系的集合。把他叫作“树”是因为他看起来像一棵倒挂的树，也就是说他是根朝上，而叶朝下

// 树具有一下特点：
// 1.每一个结点有零个或多个子节点
// 2.没有父节点的结点为根节点
// 3.每一个非根节点只有一个父节点
// 4.每一个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父节点的一个子树

// 树相关的术语：
// 结点的度：       一个结点含有的子树的个数称为该点的度
// 叶结点：         度为0的结点称为叶结点，也可以叫做终端结点
// 分支结点：       度不为0的结点称为分支结点，也可以叫做非终端结点
// 结点的层次：      从根结点开始，根结点的层次为1，根的直接后续层次为2，以此类推
// 结点的层序编号：  将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编程连续的自然数
// 树的度：         书中所有结点的度的最大值
// 树的高度（深度）： 书中结点的最大层次
// 森林：           m(m >= 0)个互不相交的树的集合，将一棵非空树的根结点删去，树就变成一个森林；给森林增加一个统一的根结点，森林变成一棵树
// 孩子结点：       一个结点直接后继结点称为该结点的孩子结点
// 双亲结点（父结点）：一个结点的直接前驱结点称为该结点的双亲结点
// 兄弟结点：       同一双亲结点的孩子结点间互称兄弟结点  
