// 定义一个整型和浮点数通用的 pi 常量
// 在这个例子中，pi 是一个模板变量，它可以被任何支持从 3.1415926535897932385L 转换的类型所实例化。
// 当使用 pi<double> 或 pi<float> 时，编译器会生成适当的变量实例。

// 注意事项
// constexpr：在上面的例子中，pi 被声明为 constexpr，这意味着它的值是在编译时确定的。这不仅提高了性能，还确保了这些值在运行时不会改变。
// 类型转换：当你使用不同的类型实例化变量模板时，需要注意可能发生的精度损失或类型转换问题。例如，将长双精度的 pi 值转换为 float 可能会导致精度丢失。
// 非类型模板参数：变量模板也可以接受非类型模板参数，即除了类型之外还可以接受具体的值作为模板参数。
// 模板特化：如同函数和类模板，变量模板也支持特化。你可以为特定类型提供专门的实现。
// 变量模板是 C++14 提供的一个强大的工具，它使得代码更加简洁、通用且易于维护。这一特性特别适用于那些需要为多个类型定义相同变量的场景。
#include <iostream>

template<typename T>
constexpr T pi = T(3.1415926535897932385L);

int main() {
    // 使用 double 类型实例化 pi
    std::cout << "pi as double: " << pi<double> << '\n';

    // 使用 float 类型实例化 pi
    std::cout << "pi as float: " << pi<float> << '\n';
    
    std::cout << "pi as int: " << pi<int> << '\n';
    return 0;
}