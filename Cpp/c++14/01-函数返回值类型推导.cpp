// 函数返回值类型推导（返回值类型推导也可以用在模板仲）（虚函数，不能使用返回值类型推导）

// C++14 引入了函数返回值类型推导，这主要通过 `auto` 和 `decltype(auto)` 关键字来实现。这一特性简化了代码编写，特别是在模板编程和 lambda 表达式中，让开发者不需要显式地指定复杂的返回类型。
// ### 函数返回值类型推导的作用主要包括：
// 1. **简化代码**：
//    对于一些复杂的类型，特别是涉及模板的函数，手动书写返回类型可能会非常繁琐且容易出错。使用返回值类型推导可以减少代码量并提高可读性。
// 2. **支持Lambda表达式**：
//    Lambda 表达式在 C++14 中可以省略返回类型，并由编译器根据返回语句自动推导出来。
// 3. **提升模板编程的灵活性**：
//    在模板函数中，当返回类型依赖于模板参数时，使用 `auto` 可以避免冗长的类型声明，使得代码更简洁、易维护。
// 4. **增强泛型编程能力**：
//    与模板结合使用时，返回值类型推导允许编写更加通用的代码，无需提前知道确切的返回类型。
// 5. **改善可维护性**：
//    如果函数内部实现发生变化导致返回类型改变，使用 `auto` 的函数无需修改函数签名，减少了代码维护的工作量。
// 6. **一致性和直观性**：
//    当函数体仅包含一个 `return` 语句时，直接从该语句推导返回类型显得很直观，增强了代码的一致性。
// 然而，需要注意的是，过度依赖返回值类型推导可能会影响代码的清晰度，因为读者需要查看函数体才能确定其返回类型。
// 因此，在实际编程中应权衡简洁性和明确性，选择合适的编码方式。


#include<iostream>
using namespace std;

template<typename T> auto func(T t)
{
    return t;
}

auto func2(int i)
{
    return i;
}

int main()
{
    cout << func(4) << endl;
    cout << func(3.4) << endl;
    cout << func(3) << endl;
    return 0;
}
