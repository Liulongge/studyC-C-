#include <iostream>
#include <string>
using namespace std;

// 对象初始化和清理

// 构造函数和析构函数
// C++中面向对象来源于生活，每个对象也都会有初始化设置以及对象销毁前的清理数据的设置

// 对象的初始化和清理是两个非常重要的安全问题
// 一个对象或者变量没有初始状态，对其后果是未知的
// 同样使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题
// C++利用了构造函数和析构函数解决上述问题。
// 这两个函数会被编译器自动调用，完成对象初始化和清理工作
// 对象的初始化和清理工作是编译器强制要求我们做的，如果不提供构造和析构，编译器会提供编译器提供的构造函数和析构函数是空的实现
// 构造函数：主要作用在于创建对象是为对象的成员属性赋值，构造函数有编译器自动调用，无需手动调用
// 析构函数：主要作用在于对象销毁前，系统自动调用，执行一些清理工作

// 构造函数语法 类名(){}
// 构造函数没有返回值，也不写void
// 函数名称与类名称相同
// 构造函数可以有参数，因此可以发生重载
// 程序在调用对象时候会自动调用构造函数，无需手动调用，而且只会调用一次

// 析构函数 ~类名(){}
// 析构函数，没有返回值， 也不用写void
// 函数名称与类名相同，在名称前面加上符号~
// 析构函数不可以有参数，因此不可以发生重载
// 程序在对象销毁之前会自动调用析构函数，无需手动调用，只会调用一次

class Persion
{
public:
    // 1.1 构造函数
    Persion()
    {
        cout << "Persion 构造函数的调用" << endl;
    }

    // 析构函数
    ~Persion()
    {
        cout << "Persion 析构函数的调用" << endl;
    }
};

void test01()
{
    Persion P;  // 在栈上的数据，test01执行完毕后，释放这个对象
}

int main(int argc, char *argv[])
{
    test01();
    return 0;
}